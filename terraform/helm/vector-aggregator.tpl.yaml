
env:
  - name: VECTOR_INDEX_PREFIX
    value: "demo-k8s-containers"
  - name: VECTOR_LOG
    value: "info"

role: Aggregator
replicas: 1
resources:
  requests:
    cpu: 200m
    memory: 1024Mi
  limits:
    cpu: 1000m
    memory: 1024Mi
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 5
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 75



serviceAccount:
  create: true

logLevel: "warn"

persistence:
  enabled: false


customConfig:
  data_dir: /vector-data-dir
  api:
    enabled: true
    address: 0.0.0.0:8686
    playground: true

  sources:
    vector-agents:
      address: 0.0.0.0:6000
      type: vector
      version: "2"

    vector-metrics:
      type: "internal_metrics"
      scrape_interval_secs: 30

  transforms:
    filter_by_annotation:
      type: filter
      inputs: ["vector-agents"]
      condition: |
        enabled = exists(.kubernetes.pod_annotations."vector.logging/enabled") && .kubernetes.pod_annotations."vector.logging/enabled" == "true"
        enabled

    parse_nginx:
      type: remap
      inputs: ["filter_by_annotation"]
      source: |
        .message = to_string!(.message)

        parsed = parse_regex!(
          .message,
          r'^(?P<remote_addr>\d{1,3}(?:\.\d{1,3}){3}) -  \[(?P<time_local>[^\]]+)\] "(?P<request>[^"]*)" (?P<status>\d{3}) (?P<body_bytes_sent>\d+) "(?P<http_referer>[^"]*)" "(?P<http_user_agent>[^"]*)" (?P<request_length>\d+) (?P<request_time>[\d.]+) \[[^\]]+\] \[\] (?P<upstream_addr>[^ ]+) (?P<upstream_bytes_sent>\d+) (?P<upstream_response_time>[\d.]+) (?P<upstream_status>\d{3}) (?P<request_id>[a-f0-9]+)'
        )

        if parsed != null {
          .remote_addr = parsed.remote_addr
          .time_local = parsed.time_local
          .status = to_int!(parsed.status)
          .body_bytes_sent = to_int!(parsed.body_bytes_sent)
          .http_referer = parsed.http_referer
          .http_user_agent = parsed.http_user_agent
          .request_length = to_int!(parsed.request_length)
          .request_time = to_float!(parsed.request_time)
          .upstream_addr = parsed.upstream_addr
          .upstream_bytes_sent = to_int!(parsed.upstream_bytes_sent)
          .upstream_response_time = to_float!(parsed.upstream_response_time)
          .upstream_status = to_int!(parsed.upstream_status)
          .request_id = parsed.request_id

          # Split method/path/protocol
          req_parts = split(parsed.request, " ")
          if length(req_parts) == 3 {
            .request_method = req_parts[0]
            .request_path = req_parts[1]
            .request_protocol = req_parts[2]
          }

          .log_type = "nginx-ingress-access"
        }

        ."@timestamp" = now()
        del(.message)


  sinks:
    my_sink_id:
      type: loki
      inputs:
        - parse_nginx
      endpoint: "http://loki.observability.svc.cluster.local:3100"
      labels:
        job: "nginx-ingress"
      encoding:
        codec: json

    prometheus:
      type: prometheus_remote_write
      endpoint: "http://vmsingle-monitoring-victoria-metrics-k8s-stack.monitoring.svc.cluster.local:8429/vmetrics/api/v1/write"
      batch:
        max_size: 2097152 # 2 MB
      healthcheck:
        enabled: false
      request:
        timeout_secs: 10
      inputs:
        - "vector-metrics"


    stdout:
      type: console
      inputs:
        - "parse_nginx"
      encoding:
        codec: json
      target: stdout
